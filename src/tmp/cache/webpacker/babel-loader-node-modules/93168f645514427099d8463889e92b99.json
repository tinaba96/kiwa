{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nimport { HOOK_PLUGIN_SETTINGS_SET } from './const';\nexport var ApiProxy = /*#__PURE__*/function () {\n  function ApiProxy(plugin, hook) {\n    var _this = this;\n\n    _classCallCheck(this, ApiProxy);\n\n    this.target = null;\n    this.targetQueue = [];\n    this.onQueue = [];\n    this.plugin = plugin;\n    this.hook = hook;\n    var defaultSettings = {};\n\n    if (plugin.settings) {\n      for (var id in plugin.settings) {\n        var item = plugin.settings[id];\n        defaultSettings[id] = item.defaultValue;\n      }\n    }\n\n    var localSettingsSaveId = \"__vue-devtools-plugin-settings__\".concat(plugin.id);\n    var currentSettings = Object.assign({}, defaultSettings);\n\n    try {\n      var raw = localStorage.getItem(localSettingsSaveId);\n      var data = JSON.parse(raw);\n      Object.assign(currentSettings, data);\n    } catch (e) {// noop\n    }\n\n    this.fallbacks = {\n      getSettings: function getSettings() {\n        return currentSettings;\n      },\n      setSettings: function setSettings(value) {\n        try {\n          localStorage.setItem(localSettingsSaveId, JSON.stringify(value));\n        } catch (e) {// noop\n        }\n\n        currentSettings = value;\n      }\n    };\n\n    if (hook) {\n      hook.on(HOOK_PLUGIN_SETTINGS_SET, function (pluginId, value) {\n        if (pluginId === _this.plugin.id) {\n          _this.fallbacks.setSettings(value);\n        }\n      });\n    }\n\n    this.proxiedOn = new Proxy({}, {\n      get: function get(_target, prop) {\n        if (_this.target) {\n          return _this.target.on[prop];\n        } else {\n          return function () {\n            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n            }\n\n            _this.onQueue.push({\n              method: prop,\n              args: args\n            });\n          };\n        }\n      }\n    });\n    this.proxiedTarget = new Proxy({}, {\n      get: function get(_target, prop) {\n        if (_this.target) {\n          return _this.target[prop];\n        } else if (prop === 'on') {\n          return _this.proxiedOn;\n        } else if (Object.keys(_this.fallbacks).includes(prop)) {\n          return function () {\n            var _this$fallbacks;\n\n            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n              args[_key2] = arguments[_key2];\n            }\n\n            _this.targetQueue.push({\n              method: prop,\n              args: args,\n              resolve: function resolve() {}\n            });\n\n            return (_this$fallbacks = _this.fallbacks)[prop].apply(_this$fallbacks, args);\n          };\n        } else {\n          return function () {\n            for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n              args[_key3] = arguments[_key3];\n            }\n\n            return new Promise(function (resolve) {\n              _this.targetQueue.push({\n                method: prop,\n                args: args,\n                resolve: resolve\n              });\n            });\n          };\n        }\n      }\n    });\n  }\n\n  _createClass(ApiProxy, [{\n    key: \"setRealTarget\",\n    value: function () {\n      var _setRealTarget = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(target) {\n        var _iterator, _step, _this$target$on, item, _iterator2, _step2, _this$target, _item;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.target = target;\n                _iterator = _createForOfIteratorHelper(this.onQueue);\n\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    item = _step.value;\n\n                    (_this$target$on = this.target.on)[item.method].apply(_this$target$on, _toConsumableArray(item.args));\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n\n                _iterator2 = _createForOfIteratorHelper(this.targetQueue);\n                _context.prev = 4;\n\n                _iterator2.s();\n\n              case 6:\n                if ((_step2 = _iterator2.n()).done) {\n                  _context.next = 15;\n                  break;\n                }\n\n                _item = _step2.value;\n                _context.t0 = _item;\n                _context.next = 11;\n                return (_this$target = this.target)[_item.method].apply(_this$target, _toConsumableArray(_item.args));\n\n              case 11:\n                _context.t1 = _context.sent;\n\n                _context.t0.resolve.call(_context.t0, _context.t1);\n\n              case 13:\n                _context.next = 6;\n                break;\n\n              case 15:\n                _context.next = 20;\n                break;\n\n              case 17:\n                _context.prev = 17;\n                _context.t2 = _context[\"catch\"](4);\n\n                _iterator2.e(_context.t2);\n\n              case 20:\n                _context.prev = 20;\n\n                _iterator2.f();\n\n                return _context.finish(20);\n\n              case 23:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[4, 17, 20, 23]]);\n      }));\n\n      function setRealTarget(_x) {\n        return _setRealTarget.apply(this, arguments);\n      }\n\n      return setRealTarget;\n    }()\n  }]);\n\n  return ApiProxy;\n}();","map":null,"metadata":{},"sourceType":"module"}