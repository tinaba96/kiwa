{"ast":null,"code":"/* eslint no-console: 0 */\n// Run this example by adding <%= javascript_pack_tag 'hello_vue' %> (and\n// <%= stylesheet_pack_tag 'hello_vue' %> if you have styles in your component)\n// to the head of your layout file,\n// like app/views/layouts/application.html.erb.\n// All it does is render <div>Hello Vue</div> at the bottom of the page.\nimport Vue from \"vue\";\nimport Vuetify from \"vuetify\"; // 追加\n\nimport \"vuetify/dist/vuetify.min.css\"; // 追加\n\nimport App from \"../app.vue\";\nVue.use(Vuetify); // 追加\n\nvar vuetify = new Vuetify(); // 追加\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  var app = new Vue({\n    vuetify: vuetify,\n    // 追加\n    render: function render(h) {\n      return h(App);\n    }\n  }).$mount();\n  document.body.appendChild(app.$el);\n  console.log(app);\n}); // The above code uses Vue without the compiler, which means you cannot\n// use Vue to target elements in your existing html templates. You would\n// need to always use single file components.\n// To be able to target elements in your existing html/erb templates,\n// comment out the above code and uncomment the below\n// Add <%= javascript_pack_tag 'hello_vue' %> to your layout\n// Then add this markup to your html template:\n//\n// <div id='hello'>\n//   {{message}}\n//   <app></app>\n// </div>\n// import Vue from 'vue/dist/vue.esm'\n// import App from '../app.vue'\n//\n// document.addEventListener('DOMContentLoaded', () => {\n//   const app = new Vue({\n//     el: '#hello',\n//     data: {\n//       message: \"Can you say hello?\"\n//     },\n//     components: { App }\n//   })\n// })\n//\n//\n//\n// If the project is using turbolinks, install 'vue-turbolinks':\n//\n// yarn add vue-turbolinks\n//\n// Then uncomment the code block below:\n//\n// import TurbolinksAdapter from 'vue-turbolinks'\n// import Vue from 'vue/dist/vue.esm'\n// import App from '../app.vue'\n//\n// Vue.use(TurbolinksAdapter)\n//\n// document.addEventListener('turbolinks:load', () => {\n//   const app = new Vue({\n//     el: '#hello',\n//     data: () => {\n//       return {\n//         message: \"Can you say hello?\"\n//       }\n//     },\n//     components: { App }\n//   })\n// })","map":{"version":3,"sources":["/app/kiwami/app/javascript/packs/hello_vue.js"],"names":["Vue","Vuetify","App","use","vuetify","document","addEventListener","app","render","h","$mount","body","appendChild","$el","console","log"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,OAAP,MAAoB,SAApB,C,CAA+B;;AAC/B,OAAO,8BAAP,C,CAAuC;;AACvC,OAAOC,GAAP,MAAgB,YAAhB;AAEAF,GAAG,CAACG,GAAJ,CAAQF,OAAR,E,CAAkB;;AAClB,IAAMG,OAAO,GAAG,IAAIH,OAAJ,EAAhB,C,CAA+B;;AAE/BI,QAAQ,CAACC,gBAAT,CAA0B,kBAA1B,EAA8C,YAAM;AAClD,MAAMC,GAAG,GAAG,IAAIP,GAAJ,CAAQ;AAClBI,IAAAA,OAAO,EAAPA,OADkB;AACT;AACTI,IAAAA,MAAM,EAAE,gBAAAC,CAAC;AAAA,aAAIA,CAAC,CAACP,GAAD,CAAL;AAAA;AAFS,GAAR,EAGTQ,MAHS,EAAZ;AAIAL,EAAAA,QAAQ,CAACM,IAAT,CAAcC,WAAd,CAA0BL,GAAG,CAACM,GAA9B;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYR,GAAZ;AACD,CARD,E,CAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["/* eslint no-console: 0 */\n// Run this example by adding <%= javascript_pack_tag 'hello_vue' %> (and\n// <%= stylesheet_pack_tag 'hello_vue' %> if you have styles in your component)\n// to the head of your layout file,\n// like app/views/layouts/application.html.erb.\n// All it does is render <div>Hello Vue</div> at the bottom of the page.\n\nimport Vue from \"vue\";\nimport Vuetify from \"vuetify\"; // 追加\nimport \"vuetify/dist/vuetify.min.css\"; // 追加\nimport App from \"../app.vue\";\n\nVue.use(Vuetify); // 追加\nconst vuetify = new Vuetify(); // 追加\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const app = new Vue({\n    vuetify, // 追加\n    render: h => h(App)\n  }).$mount();\n  document.body.appendChild(app.$el);\n\n  console.log(app);\n});\n\n\n// The above code uses Vue without the compiler, which means you cannot\n// use Vue to target elements in your existing html templates. You would\n// need to always use single file components.\n// To be able to target elements in your existing html/erb templates,\n// comment out the above code and uncomment the below\n// Add <%= javascript_pack_tag 'hello_vue' %> to your layout\n// Then add this markup to your html template:\n//\n// <div id='hello'>\n//   {{message}}\n//   <app></app>\n// </div>\n\n\n// import Vue from 'vue/dist/vue.esm'\n// import App from '../app.vue'\n//\n// document.addEventListener('DOMContentLoaded', () => {\n//   const app = new Vue({\n//     el: '#hello',\n//     data: {\n//       message: \"Can you say hello?\"\n//     },\n//     components: { App }\n//   })\n// })\n//\n//\n//\n// If the project is using turbolinks, install 'vue-turbolinks':\n//\n// yarn add vue-turbolinks\n//\n// Then uncomment the code block below:\n//\n// import TurbolinksAdapter from 'vue-turbolinks'\n// import Vue from 'vue/dist/vue.esm'\n// import App from '../app.vue'\n//\n// Vue.use(TurbolinksAdapter)\n//\n// document.addEventListener('turbolinks:load', () => {\n//   const app = new Vue({\n//     el: '#hello',\n//     data: () => {\n//       return {\n//         message: \"Can you say hello?\"\n//       }\n//     },\n//     components: { App }\n//   })\n// })\n"]},"metadata":{},"sourceType":"module"}